// SINGLE LINKED LIST
class Node {
    int data;
    Node next;

    // Constructor
    Node(int data) {
        this.data = data;
        this.next = null;
    }
}

public class SingleLinkedList {
    private int size = 0;
    Node head = null;

    // INSERT AT BEGINNING
    public void insertAtBeg(int data) {
        System.out.println("Inserting " + data + " at the beginning.");
        Node newNode = new Node(data);
        newNode.next = head;
        head = newNode;
        size++;
    }

    // INSERT AT END
    public void insertAtEnd(int data) {
        System.out.println("Inserting " + data + " at the end.");
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
        } else {
            Node temp = head;
            while (temp.next != null) {
                temp = temp.next;
            }
            temp.next = newNode;
        }
        size++;
    }

    // INSERT AT SPECIFIC POSITION
    public void insertAtAnySpecificPosition(int data, int pos) {
        System.out.println("Inserting " + data + " at position " + pos + ".");
        if (pos < 0 || pos > size) {
            System.out.println("INDEX OUT OF BOUNDS");
            return;
        }

        Node newNode = new Node(data);
        if (pos == 0) {
            newNode.next = head;
            head = newNode;
        } else {
            Node current = head;
            for (int i = 0; i < pos - 1; i++) {
                current = current.next;
            }
            newNode.next = current.next;
            current.next = newNode;
        }
        size++;
    }

    // DELETE FROM BEGINNING
    public void deleteAtBeg() {
        if (head == null) {
            System.out.println("Cannot delete from beginning: List is empty.");
            return;
        }
        System.out.println("Deleting node " + head.data + " from the beginning.");
        head = head.next;
        size--;
    }

    // DELETE FROM END
    public void deleteAtEnd() {
        if (head == null) {
            System.out.println("Cannot delete from end: List is empty.");
            return;
        }
        if (head.next == null) {
            System.out.println("Deleting node " + head.data + " from the end.");
            head = null;
        } else {
            Node temp = head;
            while (temp.next.next != null) {
                temp = temp.next;
            }
            System.out.println("Deleting node " + temp.next.data + " from the end.");
            temp.next = null;
        }
        size--;
    }

    // DELETE FROM SPECIFIC POSITION
    public void deleteAtAnySpecificPosition(int pos) {
        if (pos < 0 || pos >= size) {
            System.out.println("INDEX OUT OF BOUNDS");
            return;
        }

        if (pos == 0) {
            System.out.println("Deleting node " + head.data + " from position " + pos + ".");
            head = head.next;
        } else {
            Node current = head;
            for (int i = 0; i < pos - 1; i++) {
                current = current.next;
            }
            System.out.println("Deleting node " + current.next.data + " from position " + pos + ".");
            current.next = current.next.next;
        }
        size--;
    }

    // DISPLAY METHOD
    public void display() {
        System.out.print("Current List: ");
        if (head == null) {
            System.out.println("List is empty.");
            return;
        }

        Node temp = head;
        while (temp != null) {
            System.out.print(temp.data + " -> ");
            temp = temp.next;
        }
        System.out.println("null");
    }

    // MAIN METHOD
    public static void main(String[] args) {
        SingleLinkedList list = new SingleLinkedList();

        list.insertAtBeg(10);
        list.insertAtBeg(20);
        list.insertAtBeg(30);
        list.insertAtEnd(40);
        list.insertAtEnd(50);
        list.insertAtAnySpecificPosition(35, 2);

        list.display();

        list.deleteAtBeg();
        list.display();

        list.deleteAtEnd();
        list.display();

        list.deleteAtAnySpecificPosition(2);
        list.display();
    }
}
